{"version":3,"sources":["component/Page1.js","component/Page2.js","component/Page3.js","component/Page4.js","component/Page5.js","component/Page6.js","App.js","serviceWorker.js","index.js"],"names":["Page1","className","onClick","this","props","buttonClick","Component","Page2","Page3","handleMouseHover","setState","isHovering","state","svgMouseHover","svgHovering","src","alt","viewBox","xmlns","x1","y1","x2","y2","stroke","stroke-dasharray","process","onMouseEnter","Page4","Page5","height","width","class","cx","cy","r","stroke-width","Page6","App","pageCounter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ad1a6aa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Page1 extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"page\">\r\n        <h1>stroke-dasharray? What is it?</h1>\r\n        <button onClick={this.props.buttonClick}>Let's find out together!</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Page1;","import React, { Component } from \"react\";\r\n\r\nclass Page2 extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"page\">\r\n        <h2>The stroke-dasharray attribute is a presentation attribute defining the pattern of dashes and gaps used to paint the outline of the shape of certain elements.</h2>\r\n\r\n        <h2>As a presentation attribute, it can be applied to any element(CSS) but it has effect only on the following twelve elements:altGlyph, circle, ellipse, path, line, polygon, polyline, rect, text, textPath, tref and tspan \r\n        </h2>\r\n        <button onClick={this.props.buttonClick}>Can we see it in action?</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Page2;\r\n","import React, { Component } from \"react\";\r\n\r\n\r\nclass Page3 extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state={\r\n      isHovering:false,\r\n      svgHovering:false,\r\n    }\r\n  }\r\n\r\n  handleMouseHover =() => {\r\n    this.setState({\r\n      isHovering:!this.state.isHovering\r\n    });\r\n  }\r\n\r\n  svgMouseHover=() => {\r\n    this.setState({\r\n      svgHovering:!this.state.svgHovering\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"page\">\r\n        {this.state.isHovering ? <img className=\"lol\" onClick={this.props.buttonClick} src=\"https://media.tenor.com/images/4e102f2197a9f60ecb0fa2be1c2ddbe9/raw\" alt=\"leo\"></img> : null}\r\n        {this.state.isHovering === false ? <h2>The first line doesn't have any gaps. All the other lines have exactly the same code other than the added attribute of stroke-dasharray and different values assigned for each line.</h2> : null}\r\n        {this.state.isHovering === false && this.state.svgHovering === false ? (\r\n          <svg viewBox=\"0 0 30 10\" xmlns=\"http://www.w3.org/2000/svg\" onClick={this.svgMouseHover}>\r\n            <line x1=\"0\" y1=\"1\" x2=\"30\" y2=\"1\" stroke=\"black\" />\r\n            <line x1=\"0\" y1=\"3\" x2=\"30\" y2=\"3\" stroke=\"black\" stroke-dasharray=\"4\" />\r\n            <line x1=\"0\" y1=\"5\" x2=\"30\" y2=\"5\" stroke=\"black\" stroke-dasharray=\"4 1\" />\r\n            <line x1=\"0\" y1=\"7\" x2=\"30\" y2=\"7\" stroke=\"black\" stroke-dasharray=\"4 1 2\" />\r\n            <line x1=\"0\" y1=\"9\" x2=\"30\" y2=\"9\" stroke=\"black\" stroke-dasharray=\"4 1 2 3\" />\r\n          </svg>\r\n        ) : null}\r\n        {this.state.svgHovering ? <img className=\"code\" src={process.env.PUBLIC_URL + `/Page3.png`} onClick={this.svgMouseHover}></img> : null}\r\n        {this.state.isHovering === false ? <button onMouseEnter={this.handleMouseHover}>Do I have your attention? or even curiosity?</button> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Page3;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Page4 extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isHovering: false\r\n    };\r\n  }\r\n\r\n  handleMouseHover = () => {\r\n    this.setState({\r\n      isHovering: !this.state.isHovering\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"page\">\r\n        <h2>Member I talked about it being a presentation attribute and can be applied to elements in css? There's more to it!</h2>\r\n        <h2>You can apply a special css attribute in a keyframe animation called stroke-dashoffset to achieve the below effect. Keep in mind that I am only using lines here, this can be applied to all kinds of shapes, even user created ones using path. The possibilities are endless!</h2>\r\n\r\n        {!this.state.isHovering ? (\r\n          <svg className=\"cool\" viewBox=\"0 0 30 10\" xmlns=\"http://www.w3.org/2000/svg\" onClick={this.handleMouseHover}>\r\n            <line x1=\"0\" y1=\"1\" x2=\"30\" y2=\"1\" stroke=\"black\" />\r\n            <line x1=\"0\" y1=\"3\" x2=\"30\" y2=\"3\" stroke=\"black\" stroke-dasharray=\"4\" />\r\n            <line x1=\"0\" y1=\"5\" x2=\"30\" y2=\"5\" stroke=\"black\" stroke-dasharray=\"4 1\" />\r\n            <line x1=\"0\" y1=\"7\" x2=\"30\" y2=\"7\" stroke=\"black\" stroke-dasharray=\"4 1 2\" />\r\n            <line x1=\"0\" y1=\"9\" x2=\"30\" y2=\"9\" stroke=\"black\" stroke-dasharray=\"4 1 2 3\" />\r\n          </svg>\r\n        ) : (\r\n          <img className=\"code\" src={process.env.PUBLIC_URL + `/Page4.png`} onClick={this.handleMouseHover} alt=\"\" />\r\n        )}\r\n\r\n        <button onClick={this.props.buttonClick}>Show me these possibilities!</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Page4;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Page5 extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"page\">\r\n        <div className=\"shapes\">\r\n          <svg height=\"200\" width=\"200\" class=\"circle\">\r\n            <circle cx=\"200\" cy=\"100\" r=\"100\" stroke=\"limegreen\" stroke-width=\"10\" stroke-dasharray=\"10\" />\r\n          </svg>\r\n          <svg width=\"200\" height=\"200\" class=\"rect\">\r\n            <rect width=\"200\" height=\"200\" stroke=\"red\" stroke-width=\"10\" stroke-dasharray=\"10\" />\r\n          </svg>\r\n        </div>\r\n        <button onClick={this.props.buttonClick}>Wow is there more?</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Page5;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Page6 extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"page\">\r\n        <h1>Nope</h1>\r\n        <h2>Thank you for watching! Or reading! Or listening! Or three all together!</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Page6;\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Page1 from \"./component/Page1\"\nimport Page2 from \"./component/Page2\";\nimport Page3 from \"./component/Page3\";\nimport Page4 from \"./component/Page4\";\nimport Page5 from \"./component/Page5\";\nimport Page6 from \"./component/Page6\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state={\n      pageCounter:1\n    }\n  }\n\n  buttonClick = () => {\n    this.setState({\n      pageCounter:this.state.pageCounter + 1\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          {this.state.pageCounter === 1 ? <Page1 buttonClick={this.buttonClick} /> : null}\n          {this.state.pageCounter === 2 ? <Page2 buttonClick={this.buttonClick} /> : null}\n          {this.state.pageCounter === 3 ? <Page3 buttonClick={this.buttonClick} /> : null}\n          {this.state.pageCounter === 4 ? <Page4 buttonClick={this.buttonClick} /> : null}\n          {this.state.pageCounter === 5 ? <Page5 buttonClick={this.buttonClick} /> : null}\n          {this.state.pageCounter === 6 ? <Page6 buttonClick={this.buttonClick} /> : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}